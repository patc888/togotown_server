/*
 * This file is generated by jOOQ.
*/
package org.jooq.dev_tt.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.dev_tt.DevTt;
import org.jooq.dev_tt.Indexes;
import org.jooq.dev_tt.Keys;
import org.jooq.dev_tt.tables.records.PhraseRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Phrase extends TableImpl<PhraseRecord> {

    private static final long serialVersionUID = -1111626792;

    /**
     * The reference instance of <code>dev_tt.phrase</code>
     */
    public static final Phrase PHRASE = new Phrase();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PhraseRecord> getRecordType() {
        return PhraseRecord.class;
    }

    /**
     * The column <code>dev_tt.phrase.id</code>.
     */
    public final TableField<PhraseRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>dev_tt.phrase.en_id</code>.
     */
    public final TableField<PhraseRecord, Integer> EN_ID = createField("en_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>dev_tt.phrase.lang_id</code>.
     */
    public final TableField<PhraseRecord, Byte> LANG_ID = createField("lang_id", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>dev_tt.phrase.display</code>.
     */
    public final TableField<PhraseRecord, String> DISPLAY = createField("display", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>dev_tt.phrase.pronounce</code>.
     */
    public final TableField<PhraseRecord, String> PRONOUNCE = createField("pronounce", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>dev_tt.phrase.token_count</code>.
     */
    public final TableField<PhraseRecord, Byte> TOKEN_COUNT = createField("token_count", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>dev_tt.phrase.token_ids</code>.
     */
    public final TableField<PhraseRecord, String> TOKEN_IDS = createField("token_ids", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>dev_tt.phrase.sub_ids</code>.
     */
    public final TableField<PhraseRecord, String> SUB_IDS = createField("sub_ids", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>dev_tt.phrase.audio</code>.
     */
    public final TableField<PhraseRecord, String> AUDIO = createField("audio", org.jooq.impl.SQLDataType.CHAR(1).nullable(false).defaultValue(org.jooq.impl.DSL.inline("F", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>dev_tt.phrase.audio_id</code>.
     */
    public final TableField<PhraseRecord, String> AUDIO_ID = createField("audio_id", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>dev_tt.phrase.active</code>.
     */
    public final TableField<PhraseRecord, String> ACTIVE = createField("active", org.jooq.impl.SQLDataType.CHAR(1).nullable(false), this, "");

    /**
     * The column <code>dev_tt.phrase.reviewed</code>.
     */
    public final TableField<PhraseRecord, String> REVIEWED = createField("reviewed", org.jooq.impl.SQLDataType.CHAR(1).nullable(false), this, "");

    /**
     * The column <code>dev_tt.phrase.last_mod</code>.
     */
    public final TableField<PhraseRecord, Timestamp> LAST_MOD = createField("last_mod", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>dev_tt.phrase</code> table reference
     */
    public Phrase() {
        this(DSL.name("phrase"), null);
    }

    /**
     * Create an aliased <code>dev_tt.phrase</code> table reference
     */
    public Phrase(String alias) {
        this(DSL.name(alias), PHRASE);
    }

    /**
     * Create an aliased <code>dev_tt.phrase</code> table reference
     */
    public Phrase(Name alias) {
        this(alias, PHRASE);
    }

    private Phrase(Name alias, Table<PhraseRecord> aliased) {
        this(alias, aliased, null);
    }

    private Phrase(Name alias, Table<PhraseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DevTt.DEV_TT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PHRASE_ACTIVE_IDX, Indexes.PHRASE_EN_IDX, Indexes.PHRASE_LANG_IDX, Indexes.PHRASE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PhraseRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PHRASE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PhraseRecord> getPrimaryKey() {
        return Keys.KEY_PHRASE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PhraseRecord>> getKeys() {
        return Arrays.<UniqueKey<PhraseRecord>>asList(Keys.KEY_PHRASE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Phrase as(String alias) {
        return new Phrase(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Phrase as(Name alias) {
        return new Phrase(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Phrase rename(String name) {
        return new Phrase(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Phrase rename(Name name) {
        return new Phrase(name, null);
    }
}
