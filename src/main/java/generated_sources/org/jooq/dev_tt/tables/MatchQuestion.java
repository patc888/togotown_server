/*
 * This file is generated by jOOQ.
*/
package org.jooq.dev_tt.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.dev_tt.DevTt;
import org.jooq.dev_tt.Indexes;
import org.jooq.dev_tt.Keys;
import org.jooq.dev_tt.tables.records.MatchQuestionRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MatchQuestion extends TableImpl<MatchQuestionRecord> {

    private static final long serialVersionUID = 82241682;

    /**
     * The reference instance of <code>dev_tt.match_question</code>
     */
    public static final MatchQuestion MATCH_QUESTION = new MatchQuestion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MatchQuestionRecord> getRecordType() {
        return MatchQuestionRecord.class;
    }

    /**
     * The column <code>dev_tt.match_question.match_id</code>.
     */
    public final TableField<MatchQuestionRecord, Integer> MATCH_ID = createField("match_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("-1", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>dev_tt.match_question.num</code>.
     */
    public final TableField<MatchQuestionRecord, Integer> NUM = createField("num", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("-1", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>dev_tt.match_question.unit_id</code>.
     */
    public final TableField<MatchQuestionRecord, String> UNIT_ID = createField("unit_id", org.jooq.impl.SQLDataType.VARCHAR(25).nullable(false), this, "");

    /**
     * The column <code>dev_tt.match_question.question_mode</code>.
     */
    public final TableField<MatchQuestionRecord, Integer> QUESTION_MODE = createField("question_mode", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>dev_tt.match_question.alt_ids</code>.
     */
    public final TableField<MatchQuestionRecord, String> ALT_IDS = createField("alt_ids", org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false).defaultValue(org.jooq.impl.DSL.inline("-1", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>dev_tt.match_question.usera_result</code>.
     */
    public final TableField<MatchQuestionRecord, String> USERA_RESULT = createField("usera_result", org.jooq.impl.SQLDataType.CHAR(1), this, "");

    /**
     * The column <code>dev_tt.match_question.userb_result</code>.
     */
    public final TableField<MatchQuestionRecord, String> USERB_RESULT = createField("userb_result", org.jooq.impl.SQLDataType.CHAR(1), this, "");

    /**
     * The column <code>dev_tt.match_question.last_mod</code>.
     */
    public final TableField<MatchQuestionRecord, Timestamp> LAST_MOD = createField("last_mod", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>dev_tt.match_question</code> table reference
     */
    public MatchQuestion() {
        this(DSL.name("match_question"), null);
    }

    /**
     * Create an aliased <code>dev_tt.match_question</code> table reference
     */
    public MatchQuestion(String alias) {
        this(DSL.name(alias), MATCH_QUESTION);
    }

    /**
     * Create an aliased <code>dev_tt.match_question</code> table reference
     */
    public MatchQuestion(Name alias) {
        this(alias, MATCH_QUESTION);
    }

    private MatchQuestion(Name alias, Table<MatchQuestionRecord> aliased) {
        this(alias, aliased, null);
    }

    private MatchQuestion(Name alias, Table<MatchQuestionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DevTt.DEV_TT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MATCH_QUESTION_MATCH_CLUE_IDX, Indexes.MATCH_QUESTION_MATCH_IDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MatchQuestionRecord>> getKeys() {
        return Arrays.<UniqueKey<MatchQuestionRecord>>asList(Keys.KEY_MATCH_QUESTION_MATCH_CLUE_IDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MatchQuestion as(String alias) {
        return new MatchQuestion(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MatchQuestion as(Name alias) {
        return new MatchQuestion(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MatchQuestion rename(String name) {
        return new MatchQuestion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MatchQuestion rename(Name name) {
        return new MatchQuestion(name, null);
    }
}
