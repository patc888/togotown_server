/*
 * This file is generated by jOOQ.
*/
package org.jooq.dev_tt.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.dev_tt.DevTt;
import org.jooq.dev_tt.Indexes;
import org.jooq.dev_tt.Keys;
import org.jooq.dev_tt.tables.records.MatchRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Match extends TableImpl<MatchRecord> {

    private static final long serialVersionUID = 898294619;

    /**
     * The reference instance of <code>dev_tt.match</code>
     */
    public static final Match MATCH = new Match();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MatchRecord> getRecordType() {
        return MatchRecord.class;
    }

    /**
     * The column <code>dev_tt.match.id</code>.
     */
    public final TableField<MatchRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>dev_tt.match.lang_id</code>.
     */
    public final TableField<MatchRecord, Integer> LANG_ID = createField("lang_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("-1", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>dev_tt.match.state</code>.
     */
    public final TableField<MatchRecord, Integer> STATE = createField("state", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>dev_tt.match.prize_id</code>.
     */
    public final TableField<MatchRecord, Integer> PRIZE_ID = createField("prize_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("-1", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>dev_tt.match.prize_ids</code>.
     */
    public final TableField<MatchRecord, String> PRIZE_IDS = createField("prize_ids", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>dev_tt.match.created_by</code>.
     */
    public final TableField<MatchRecord, Integer> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("-1", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>dev_tt.match.created</code>.
     */
    public final TableField<MatchRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>dev_tt.match.last_mod</code>.
     */
    public final TableField<MatchRecord, Timestamp> LAST_MOD = createField("last_mod", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>dev_tt.match</code> table reference
     */
    public Match() {
        this(DSL.name("match"), null);
    }

    /**
     * Create an aliased <code>dev_tt.match</code> table reference
     */
    public Match(String alias) {
        this(DSL.name(alias), MATCH);
    }

    /**
     * Create an aliased <code>dev_tt.match</code> table reference
     */
    public Match(Name alias) {
        this(alias, MATCH);
    }

    private Match(Name alias, Table<MatchRecord> aliased) {
        this(alias, aliased, null);
    }

    private Match(Name alias, Table<MatchRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DevTt.DEV_TT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MATCH_LANG_IDX, Indexes.MATCH_PRIMARY, Indexes.MATCH_STATE_IDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MatchRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MATCH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MatchRecord> getPrimaryKey() {
        return Keys.KEY_MATCH_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MatchRecord>> getKeys() {
        return Arrays.<UniqueKey<MatchRecord>>asList(Keys.KEY_MATCH_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Match as(String alias) {
        return new Match(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Match as(Name alias) {
        return new Match(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Match rename(String name) {
        return new Match(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Match rename(Name name) {
        return new Match(name, null);
    }
}
